#include <iostream>
#include <conio.h>
#include<Windows.h>

using namespace std;
bool gameOver;
const int width = 30;
const int height = 20;
int x, y, fruitX, fruitY, score, nTail;
int tailX[100], tailY[100];
enum CDirection { STOP = 0, LEFT, RIGHT, UP, DOWN };
CDirection dir;

void FruitPos() {
	fruitX = rand() % width;
	fruitY = rand() % height;
	while (fruitX == 0 || fruitX == width - 1 || fruitY == 0 || fruitY == width - 1) {
		fruitX = rand() % width;
		fruitY = rand() % height;
	}
}
void Setup() {
	gameOver = false;
	dir = STOP;
	x = width / 2;
	y = height / 2;
	FruitPos();
	score = 0;
	nTail = 0;
}
void Draw() {
	system("cls"); //system ("clear");
	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			if (i == 0 || i == height - 1) {
				cout << "#";
			}
			else {
				if (j == 0 || j == width - 1)
					cout << "#";
				else if (i == fruitY && j == fruitX)
					cout << "F";
				else if (i == y && j == x)
					cout << "O";
				else {
					bool print = false;
					for (int k = 0; k < nTail; k++) {
						if (tailX[k] == j && tailY[k] == i) {
							cout << "o";
							print = true;
						}
					}
					if (!print)
					cout << " ";
				}
			}
		}
		cout << endl;
	}
	cout << "Score: " << score << endl;
}

void Input() {
	if (_kbhit()) {
		switch (_getch()) {
		case 'a':
			dir = LEFT;
			break;
		case 'w':
			dir = UP;
			break;
		case 'd':
			dir = RIGHT;
			break;
		case 's':
			dir = DOWN;
			break;
		case 'x':
			gameOver = true;
			break;
		default:
			break;
		}
	}
}
void Logic() {
	int prevX = tailX[0];
	int prevY = tailY[0];
	int prev2X, prev2Y;
	tailX[0] = x;
	tailY[0] = y;
	for (int i = 1; i < nTail; i++) {
		prev2X = tailX[i];
		prev2Y = tailY[i];
		tailX[i] = prevX;
		tailY[i] = prevY;
		prevX = prev2X;
		prevY = prev2Y;
	}
	switch (dir) {
	case LEFT:
		x--;
		break;
	case RIGHT:
		x++;
		break;
	case UP:
		y--;
		break;
	case DOWN:
		y++;
		break;
	default:
		break;
	}
	if (x >= width-1 || x <= 0 || y >= height-1 || y <= 0) {
		gameOver = true;
	}
	else if (x == fruitX && y == fruitY) {
		FruitPos();
		score += 10;
		nTail++;
	}
	for (int i = 0; i < nTail; i++) {
		if (tailX[i] == x && tailY[i] == y)
			gameOver = true;
	}
}
int main() {
	Setup();
	while (!gameOver) {
		Draw();
		Input();
		Logic();
		Sleep(50);
	}
	return 0;
}
